@page "/gas-volume-calculator"
@using GasMatic.Shared.Domain

@inject IStringLocalizer<AppResources> Localizer

<PageTitle>@Localizer["GasVolumeCalculatorTitle"]</PageTitle>
<HeadContent>
    <meta name="description" content="">
</HeadContent>

<h3>@Localizer["GasVolumeCalculatorTitle"]</h3>

<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
        <EditForm Model="_input" OnSubmit="@CalculateGasVolume">
            <DataAnnotationsValidator/>

            <div class="mb-3">
                <label class="mb-1" for="nominalPipeSize">Nominal Pipe Size - DN (mm)</label>
                <InputSelect @bind-Value="_input.NominalPipeSize"
                             class="form-select" id="nominalPipeSize">
                    @foreach (var nps in Enum.GetValues<NominalPipeSize>())
                    {
                        <option value="@nps">@(NominalPipeSizeExtensions.Label(nps))</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="mb-1" for="length">Length (m)</label>
                <CustomInputText @bind-Value="_input.Length" @bind-Value:after="ValidateInput"
                                 class="form-control" id="length"
                                 placeholder="Enter length in meters"/>
                <ValidationMessage class="text-danger mt-1" For="() => _input.Length"/>
            </div>

            <div class="mb-3">
                <label for="pressure">Pressure (mbar)</label>
                <div class="form-check form-switch my-3">
                    @* ReSharper disable once Html.AttributeValueNotResolved *@
                    <InputCheckbox @bind-Value="_useCustomPressure" @bind-Value:after="ValidateInput"
                                   class="form-check-input" id="useCustomPressure"
                                   role="switch"/>
                    <label class="form-check-label" for="useCustomPressure">Use Custom Pressure?</label>
                </div>

                @if (_useCustomPressure)
                {
                    <div class="mb-3">
                        <CustomInputText @bind-Value="_input.CustomPressure" @bind-Value:after="ValidateInput"
                                         DisplayName="Custom Pressure"
                                         class="form-control" id="pressure"
                                         placeholder="Enter pressure in mbar"/>
                        <ValidationMessage class="text-danger mt-1" For="() => _input.CustomPressure"/>
                    </div>
                }
                else
                {
                    @* <div class="btn-group" role="group" aria-label="Basic radio toggle button group"> *@
                    @*     <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked> *@
                    @*     <label class="btn btn-outline-primary" for="btnradio1">Rad 1</label> *@
                    @* *@
                    @*     <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off"> *@
                    @*     <label class="btn btn-outline-primary" for="btnradio2">Radio 2</label> *@
                    @* *@
                    @*     <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off"> *@
                    @*     <label class="btn btn-outline-primary" for="btnradio3">Radio 3</label> *@
                    @* </div> *@

                    <InputRadioGroup @bind-Value="_input.SelectedPressure" Name="pressureOptions"
                                     class="btn-group" id="pressure"
                                     role="group">
                        @foreach (var pressure in Enum.GetValues<Pressure>())
                        {
                            <InputRadio Value="@pressure" autocomplete="off"
                                        class="btn-check" id="@pressure"/>
                            <label class="btn btn-outline-primary" for="@pressure">@((int)pressure)</label>
                        }
                    </InputRadioGroup>
                }
            </div>

            <button type="submit" disabled="@(!_isFormValid)"
                    class="btn btn-primary">
                Calculate
            </button>
        </EditForm>

        <h4 class="mt-3">Gas Volume: @_gasVolume m<sup>3</sup></h4>
    </ChildContent>
    
    <ErrorContent>
        <p>An unexpected error has occurred. Press the button to recover.</p>
        <button @onclick="Recover">Recover</button>
    </ErrorContent>
</ErrorBoundary>